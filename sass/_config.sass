@import 'bourbon/bourbon'

// Background color of the whole widget
$bg: #181817

// Background color of the button backing area. As you can see on the mock, 
// this is actually a gradient, so this variable sets the top color and you'll 
// need to use SASS to ensure it's rendered as a radial gradient, using the 
// color functions to choose a dirtier color for the shadow (as shown in the mock)
=control_bg($top:#F6F6F6, $bottom:#D8D8D8)
  +linear-gradient(top, $top 0%, $bottom 100%)

// Background color of the button. Again, this is actually a gradient and will need 
// SASS functions to make it shaded on top.
$button-bg: #FFFFFF

// Background color when hovered. (Again, modified to gradient via SASS functions).
=button_hover_bg($inner:#D20A11, $outer:#981005)
  +radial-gradient($inner, $outer)

// Background color when active.  (Again, modified to gradient via SASS functions).
$button-active-bg: #FFFFFF

// Color of the button symbol (play button, pause button etc)
$button-fg: #000000

// Color of progress bar on played portion and also text below it. As shown in the 
// mock, the bar is two colors, so this is the top color and need to use SASS to 
// darken the bottom color.
=progress_fg($top:#970b01, $bottom:#750900)
  +linear-gradient(top, $top 0%, $top 51%, $bottom 51%, $bottom 100%)

// Color of progress bar on unplayed portion.
=progress_bg($top:#5b0b01, $bottom:#4b0900)
  +linear-gradient(top, $top 0%, $top 51%, $bottom 51%, $bottom 100%)

// Color of progress bar when buffering. You can use something like Twitter 
// Bootstrap's progress indicator trick, using masks to make this declarable in CSS.
=progress-buffering($top:#5b0b01, $bottom:#4b0900)
  +progress_fg($top, $bottom)

// Color of volume and symbols. (Note this doesn't have two colors, unlike progress 
// bar. It just extends out from the left.)
$volume-bg: #640C00

// Volume level background
$volume-level-bg: #7A190C

// Color of episode items.
$episode-bg: #101114

// Color of episode text.
$episode-fg: #FFFFFF

// Color of episode option text
$episode-option: #CCCCCC

// bg current playing
$episode-active: #3A3938

// bg when hover
$episode-hover: #252323

// Other variables:
// (true or false) Whether to include the thumbnail image above the player.
$thumbnail: true

// Player width. Empty by default, so width will automatically be 100% (ie the 
// full-width of the parent element). To support fluid layout, you will need to set 
// button widths based on percent-values.
// default: 480
$width: 480


// If set, overrides the default font and is used as a font-family style for the 
// whole widget. For the default font, you should use a font from Google Web Fonts 
// which matches the mock as closely as possible. 
$font-family: 'Abel', 'Ubuntu Mono', sans-serif

// footer
$powered-by-bg: #5A0A00
$powered-by-fg: #FFFFFF


//////////////////////////////////////////////////////////////////////
//////////////////  END OF USER CONFIGURATION  ///////////////////////
//////////////////////////////////////////////////////////////////////
// Advisable not to edit below if you don't know what you're doing. //
// The sizes below are ratio and proportion to jplayer width 480px  //
//////////////////////////////////////////////////////////////////////

// episode font size
// 480px is the original width of the player
$orig-width: 480

// maximum jplayer padding is 15px
$player-padding:    15 * $width / $orig-width
@if $player-padding > 15
  $player-padding: 15

// maximum jplayer radius
$player-radius: 15 * $width / $orig-width
@if $player-radius > 15
  $player-radius: 15

// maximum episode font size is 14px
$episode-font-size: 24 * $width / $orig-width
@if $episode-font-size < 14
  $episode-font-size: 14
$episode-padding:   20 * $width / $orig-width


//// buttons
$default-button-font-margin: 17
$default-small-button-line-height: 75
$default-big-button-line-height:  90
$default-button-margin-left: 17
$default-next-margin-left: 18
$i: 220
@while $i >= $width
  @if $i >= $width
    $default-button-font-margin: $default-button-font-margin - 2
    $default-small-button-line-height: $default-small-button-line-height - 2
    $default-big-button-line-height: $default-big-button-line-height - 4
    $default-button-margin-left: $default-button-margin-left - 3
    $default-next-margin-left: $default-next-margin-left - 2
  $i: $i - 50

$button-margin-left: $default-button-margin-left * $width / $orig-width

$button-font-margin: $default-button-font-margin * $width / $orig-width

// 112px is the original width of the bigger buttons
$default-small-button-size: 112
$i: 220
@while $i >= $width
  @if $i >= $width
    $default-small-button-size: $default-small-button-size - 2
  $i: $i - 10
$small-button-size:   floor($default-small-button-size * $width / $orig-width)
$small-button-font-size:    2.2 * $width / $orig-width
$small-button-line-height: $default-small-button-line-height * $width / $orig-width
$small-button-margin-top:     7 * $width / $orig-width

$default-big-button-size: 126
$i: 220
@while $i >= $width
  @if $i >= $width
    $default-big-button-size: $default-big-button-size - 2
  $i: $i - 10
$big-button-size:   floor($default-big-button-size * $width / $orig-width)
$big-button-font-size:    2.4 * $width / $orig-width
$big-button-line-height:  $default-big-button-line-height * $width / $orig-width

// minimum margin-left of previous button is 13
// prev button
$prev-margin-left:    13 * $width / $orig-width
@if $prev-margin-left < 13
  $prev-margin-left: 0 

// next button
$next-margin-left: $default-next-margin-left * $width / $orig-width

// powered by section
$powered-font-size: 13 * $width / $orig-width
@if $powered-font-size < 12
  $powered-font-size: 12
$powered-padding-h:  5 * $width / $orig-width
$powered-padding-v: 10 * $width / $orig-width
$powered-radius:     8 * $width / $orig-width 
@if $powered-radius > 8
  $powered-radius: 8
